using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using FastEndpoints;
using Microsoft.EntityFrameworkCore;
using OpenRA.MiniYamlParser;

namespace OpenRA.MasterServer.Legacy;

public class LegcacyListGamesEndpoint : EndpointWithoutRequest
{
    private readonly MasterServerContext _context;

    public LegcacyListGamesEndpoint(MasterServerContext context)
    {
        _context = context;
    }
    public override void Configure()
    {
        Get("/legacy");
        AllowAnonymous();
    }

    public override async Task HandleAsync(CancellationToken ct)
    {
        var servers = await _context.Servers.ToListAsync();

        var yaml = new List<MiniYamlNode>();

        foreach (var server in servers)
        {
            var serverTaml = Get(server, 0);
            yaml.Add(new MiniYamlNode($"Game@{0}", serverTaml));

        }

        var output = yaml.ToLines()
.JoinWith("\n");

        await SendStringAsync(output);
    }

    private MiniYaml Get(Server server, int index)
    {
        var root = new List<MiniYamlNode>
        {
            new MiniYamlNode("Id", 0.ToString()),
            new MiniYamlNode("Address", $"{server.Address}:{server.Port}"),
            new MiniYamlNode("Mod", server.Mod),
            new MiniYamlNode("Version", server.Version),
            new MiniYamlNode("ModTitle", server.ModTitle),
            new MiniYamlNode("ModIcon32", server.ModIcon32),
            new MiniYamlNode("Map", server.Map),
            new MiniYamlNode("Players", server.Clients.Count.ToString()),
            new MiniYamlNode("MaxPlayers", server.MaxPlayers.ToString()),
            new MiniYamlNode("Protected", server.Protected.ToString()),
            new MiniYamlNode("Authentication", server.Authentication.ToString()),
            new MiniYamlNode("Location", server.Location),
            new MiniYamlNode("Started", server.Started),
            new MiniYamlNode("PlayTime", server.PlayTime.ToString())
        };


        //if (lanGame)
        //{
        //    // Add fields that are normally generated by the master server
        //    // LAN games overload the Id with a GUID string (rather than an ID) to allow deduplication
        //    root.Add(new MiniYamlNode("Id", Platform.SessionGUID.ToString()));
        //    root.Add(new MiniYamlNode("Players", Clients.Count(c => !c.IsBot && !c.IsSpectator).ToString()));
        //    root.Add(new MiniYamlNode("Spectators", Clients.Count(c => c.IsSpectator).ToString()));
        //    root.Add(new MiniYamlNode("Bots", Clients.Count(c => c.IsBot).ToString()));

        //    // Included for backwards compatibility with older clients that don't support separated Mod/Version.
        //    root.Add(new MiniYamlNode("Mods", Mod + "@" + Version));
        //}

        var clientsNode = new MiniYaml("");
        var i = 0;
        foreach (var c in server.Clients)
        {

            var clientNodes = new List<MiniYamlNode>
            {
                new MiniYamlNode("Name", c.Name),
                new MiniYamlNode("Fingerprint", c.Fingerprint),
                new MiniYamlNode("Color", c.Color),
                new MiniYamlNode("Faction", c.Faction),
                new MiniYamlNode("Team", c.Team.ToString()),
                new MiniYamlNode("SpawnPoint", c.SpawnPoint.ToString()),
                new MiniYamlNode("IsAdmin", c.IsAdmin.ToString()),
                new MiniYamlNode("IsSpectator", c.IsSpectator.ToString()),
                new MiniYamlNode("IsBot", c.IsBot.ToString())
            };


            var clientNode = new MiniYaml("", clientNodes);



            clientsNode.Nodes.Add(new MiniYamlNode("Client@" + i++.ToString(), clientNode));


        }
        //

        root.Add(new MiniYamlNode("Clients", clientsNode));


        return new MiniYaml("", root);
    }
}